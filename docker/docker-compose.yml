name: poc-ros-zenoh

x-environment: &environment
    environment:
      RUST_LOG: ${RUST_LOG}

services:
  zenoh-router:
    <<: *environment
    profiles:
      - run
    image: ubuntu:24.04
    entrypoint: >
      /bin/bash -c "
      /usr/bin/router
      "
    networks:
      - robot-net
    expose:
      - 7000
      - 7447
    volumes:
      - .././target/release/router:/usr/bin/router:rw

  zenoh-bridge:
    <<: *environment
    profiles:
      - run
    image: eclipse/zenoh-bridge-ros2dds:latest
    command: "-c bridge_config.json5"
    networks:
      - robot-net
    expose:
      - 7447
    volumes:
      - ../client-ros/bridge_config.json5:/bridge_config.json5:ro

  turtle-sim:
    environment:
      DISPLAY: "192.168.0.2:0.0"
      ROS_AUTOMATIC_DISCOVERY_RANGE: "LOCALHOST"
      ROS_LOCALHOST_ONLY: 1
    profiles:
      - run
    build:
      dockerfile: ros-turtlesim.Dockerfile
      context: .
    command: bash -c "source /opt/ros/kilted/setup.bash && ros2 run turtlesim turtlesim_node"
    networks:
      - robot-net
    expose:
      - 7447
    volumes:
      - /tmp/.X11-unix/:/tmp/.X11-unix:rw

  rpc-client:
    <<: *environment
    environment:
      RPC_SERVER_ADDR: "zenoh-router:7000"
    profiles:
      - run
    image: ubuntu:22.04
    entrypoint: > 
      /bin/bash -c "
      sleep 1 &&
      /usr/bin/client
      "
    networks:
      - robot-net
    expose:
      - 7000
    volumes:
      - .././target/release/client:/usr/bin/client:rw
    depends_on:
      zenoh-router:
        condition: service_started
    tty: true
    stdin_open: true

  build:
    profiles:
      - build-ros
    build:
      context: .
      dockerfile: builder-ros.Dockerfile
    volumes:
      - ../.:/app:rw
    entrypoint: /app/docker/entrypoint-dev.sh
    working_dir: /app
    command: "cargo build --release"
  
  dev:
    profiles:
      - build-ros
    build:
      context: .
      dockerfile: builder-ros.Dockerfile
    volumes:
      - ../.:/app:rw
    entrypoint: /app/docker/entrypoint-dev.sh
    working_dir: /app
    command: "cargo watch -x check -x clippy -x build"

networks:
  robot-net:
